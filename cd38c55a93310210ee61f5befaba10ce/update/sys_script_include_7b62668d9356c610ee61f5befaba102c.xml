<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_1346722_feedback.feedbackSystem</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>feedbackSystem</name>
        <script><![CDATA[var feedbackSystem = Class.create();
feedbackSystem.prototype = {
    initialize: function() {},
    audioCreation: function(sysId, data) {
        var chat = data;

        function attachBase64AudioToRecord(recordSysId, tableName, fileName, data) {

            var base64EncodedContent = data;

            var record = new GlideRecord(tableName);
            if (record.get(recordSysId)) {
                var attachment = new GlideSysAttachment();

                var contentType = 'text/plain';
                var attachmentSysId = attachment.write(record, fileName, contentType, base64EncodedContent);

                return attachmentSysId;
            } else {
                return '0';
            }
        }

        var formatedChat = '';
        for (var key in chat) {
            if (chat.hasOwnProperty(key)) {
                formated += 'Bot - ' + key + '\n ' + 'User - ' + chat[key] + '\n';
            }
        }

    },
    docsCreation: function() {

    },
    calculateEmotion: function(text) {
        // Predefined lists of positive and negative words
        const positiveWords = ["good", "great", "excellent", "awesome", "fantastic", "happy", "love", "wonderful", "positive", "satisfied", "nice"];
        const negativeWords = ["bad", "terrible", "awful", "horrible", "poor", "sad", "hate", "negative", "unsatisfied", "worst"];

        // Helper function to count syllables in a word
        function countSyllables(word) {
            word = word.toLowerCase();
            if (word.length <= 3) return 1;
            word = word.replace(/(?:[^laeiouy]es|ed|[^laeiouy]e)$/, '');
            word = word.replace(/^y/, '');
            const syllableMatch = word.match(/[aeiouy]{1,2}/g);
            return syllableMatch ? syllableMatch.length : 1;
        }

        // Function to analyze feedback for emotion, rating, and complexity
        function analyzeFeedback(feedback) {
            // Convert feedback to lowercase and split into words
            const words = feedback.toLowerCase().split(/\s+/);

            // Count positive and negative words
            let positiveCount = 0;
            let negativeCount = 0;
            let complexWordCount = 0;

            const uniqueWords = new Set();

            words.forEach(word => {
                if (positiveWords.includes(word)) {
                    positiveCount++;
                } else if (negativeWords.includes(word)) {
                    negativeCount++;
                }
                if (countSyllables(word) >= 3) {
                    complexWordCount++;
                }
                uniqueWords.add(word);
            });

            // Calculate sentiment score
            let sentimentScore = positiveCount - negativeCount;
            let emotion;
            if (sentimentScore > 0) {
                emotion = 'Positive';
            } else if (sentimentScore < 0) {
                emotion = 'Negative';
            } else {
                emotion = 'Neutral';
            }

            // Determine rating based on sentiment score
            let rating;
            if (sentimentScore >= 5) {
                rating = 5; // Excellent
            } else if (sentimentScore >= 2) {
                rating = 4; // Good
            } else if (sentimentScore === 0) {
                rating = 3; // Neutral
            } else if (sentimentScore <= -2) {
                rating = 2; // Poor
            } else {
                rating = 1; // Bad
            }

            // Calculate complexity
            const lengthScore = feedback.length;
            const vocabularyRichnessScore = uniqueWords.size;
            const complexWordsScore = complexWordCount;

            const lengthWeight = 0.4;
            const vocabularyRichnessWeight = 0.3;
            const complexWordsWeight = 0.3;

            const maxWordCount = 1000;
            const lengthNormalized = lengthScore / maxWordCount;
            const vocabularyRichnessNormalized = vocabularyRichnessScore / words.length;
            const complexWordsNormalized = complexWordsScore / words.length;

            const complexityScore = (lengthWeight * lengthNormalized) +
                (vocabularyRichnessWeight * vocabularyRichnessNormalized) +
                (complexWordsWeight * complexWordsNormalized);

            // Return the sentiment score, emotion, rating, and complexity
            return {
                sentimentScore: sentimentScore,
                emotion: emotion,
                rating: rating,
                complexityScore: complexityScore
            };
        }

        // Example usage
        const feedback = text;
        const feedbackAnalysis = analyzeFeedback(feedback);
        return feedbackAnalysis;
    },
    type: 'feedbackSystem'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>nauman.ansari</sys_created_by>
        <sys_created_on>2024-05-19 15:13:57</sys_created_on>
        <sys_id>7b62668d9356c610ee61f5befaba102c</sys_id>
        <sys_mod_count>2</sys_mod_count>
        <sys_name>feedbackSystem</sys_name>
        <sys_package display_value="Feedback" source="x_1346722_feedback">cd38c55a93310210ee61f5befaba10ce</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Feedback">cd38c55a93310210ee61f5befaba10ce</sys_scope>
        <sys_update_name>sys_script_include_7b62668d9356c610ee61f5befaba102c</sys_update_name>
        <sys_updated_by>nauman.ansari</sys_updated_by>
        <sys_updated_on>2024-05-21 05:13:38</sys_updated_on>
    </sys_script_include>
</record_update>
